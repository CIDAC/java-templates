// BUILD

buildscript {
    ext {
        lombokVersion = '1.18.0'
        swaggerVersion = '2.9.2'
        elideVersion = '4.2.4'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
            url 'https://repo.spring.io/plugins-snapshot'
            url "https://repo.spring.io/milestone"
        }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE'
        // In the spirit of the Maven Versions Plugin, this plugin provides a task to
        // determine which dependencies have updates.
        // https://github.com/ben-manes/gradle-versions-plugin
        // >>> gradle dependencyUpdates -Drevision=release
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        // Gradle quality plugin for Java and Groovy.
        // https://github.com/xvik/gradle-quality-plugin
        classpath 'ru.vyarus:gradle-quality-plugin:2.4.0'
        // Gradle plugin for running SonarQube analysis.
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2'
        // https://github.com/jeremylong/dependency-check-gradle
        // >>>> gradle dependencyCheckAnalyze --info
        classpath 'org.owasp:dependency-check-gradle:3.2.1'
    }
}

plugins {
    // https://github.com/OSSIndex/ossindex-gradle-plugin
    // >>>> gradle audit
    id 'net.ossindex.audit' version '0.3.20-beta'
    id 'org.flywaydb.flyway' version '5.1.4'
    id 'java'
}

apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'ru.vyarus.quality'
apply plugin: 'org.sonarqube'
apply plugin: 'org.owasp.dependencycheck'

group = "${group}"
version = "${version}"

description = """Demo project for Spring Boot Web"""
mainClassName = "${pkg}.DemoApplication"

sourceCompatibility = 1.8
targetCompatibility = 1.8

String dev = 'development'
String test = 'test'
String prod = 'production'
String environment = project.hasProperty('jenv')? project.property('jenv') : dev

System.setProperty 'jenv', environment

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    // runtime 'org.springframework.boot:spring-boot-properties-migrator'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.data:spring-data-rest-hal-browser'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-web'
    //compile test.equals(environment)? 'com.h2database:h2': 'org.postgresql:postgresql'
    compile 'com.h2database:h2'
    compile 'org.postgresql:postgresql'

    compile 'org.flywaydb:flyway-core:5.1.4'

    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:25.1-jre'

    //http://springfox.github.io/springfox/docs/snapshot/
    compile "io.springfox:springfox-swagger2:\$swaggerVersion"
    compile "io.springfox:springfox-swagger-ui:\$swaggerVersion"

    //These are the Elide dependencies
    // compile "com.yahoo.elide:elide-core:\$elideVersion"
    //We'll be using Hibernate 5, so we need the Elide Hibernate 5 datastore
    // compile "com.yahoo.elide:elide-datastore-hibernate5:\$elideVersion"
    //We then need to include Hibernate 5
    compile 'org.hibernate:hibernate-entitymanager:5.3.2.Final'
    compile 'org.hibernate:hibernate-core:5.3.2.Final'
 
    runtime 'org.glassfish.jaxb:jaxb-runtime:2.3.0.1'
    runtime 'javax.activation:activation:1.1.1'

    // Use the latest Groovy version for Spock testing
    testCompile 'org.codehaus.groovy:groovy'

    // Use the awesome Spock testing and specification framework even with Java
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'
    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.flywaydb.flyway-test-extensions:flyway-spring-test:5.0.0'
    testRuntime 'com.h2database:h2'

    // lombok
    annotationProcessor "org.projectlombok:lombok:\$lombokVersion"
    compileOnly "org.projectlombok:lombok:\$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:\$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:\$lombokVersion"
}

quality {
    exclude '**/DemoApplication.java'
    strict = false
}

check.enabled = test.equals(environment)

apply from: rootProject.file('gradle/versions-plugin-check.gradle')

// The run task added by the application plugin is also of type JavaExec.
tasks.withType(JavaExec) {
    // Assign all Java system properties from the command line to the JavaExec task.
    systemProperties System.properties
}
